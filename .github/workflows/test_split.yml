name: "test split"

on:
  workflow_dispatch:
    inputs:
      cuda_version:
        description: "cuda version"
        required: false
        default: "11.8.0"
        
jobs:
  docker-build-base-notebook:
    runs-on: ubuntu-latest
    steps:
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: ${{ inputs.cuda_version }}
          separator: '.'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          CU="${{steps.split.outputs._0}}${{ steps.split.outputs._1 }}"
          echo ::set-output name=cu::${CU}

  # docker-build-torch-notebook:
  #   runs-on: ubuntu-latest
  #   needs: docker-build-base-notebook
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Prepare
  #       id: prep
  #       run: |
  #         DOCKER_IMAGE=hsz1273327/gpu-torch-notebook
  #         SHORTREF=${GITHUB_SHA::8}
  #         TAGS="${DOCKER_IMAGE}:pytorch${{ inputs.pytorch_version }}-cuda${{ inputs.cuda_version }}-notebook${{ inputs.notebook_version }},${DOCKER_IMAGE}:${SHORTREF},${DOCKER_IMAGE}:latest"
  #         # Set output parameters.
  #         echo ::set-output name=tags::${TAGS}
  #         echo ::set-output name=docker_image::${DOCKER_IMAGE}
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@master
  #       with:
  #         platforms: all
  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@master
  #     - name: Login to DockerHub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USER }}
  #         password: ${{ secrets.DOCKER_HUB_PWD }}
  #     - name: Build
  #       uses: docker/build-push-action@v2
  #       with:
  #         builder: ${{ steps.buildx.outputs.name }}
  #         context: "{{defaultContext}}:gpubase-notebook/torch-notebook"
  #         file: dockerfile
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         build-args: CUDA_VERSION=${{ inputs.cuda_version }},CUDNN_VERSION=${{ inputs.cudnn_version }},UBUNTU_VERSION=${{ inputs.ubuntu_version }},NOTEBOOK_VERSION=${{ inputs.notebook_version }}
  #         tags: ${{ steps.prep.outputs.tags }}